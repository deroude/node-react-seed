openapi: 3.0.1
info:
  title: Sample API
  description: Sample OpenAPI starter
  version: 1.0.0
servers:
  - url: 'http://localhost:9000/'
tags:
  - name: article
    description: 'Everything concerning articles, comments'
  - name: user
    description: Operations about user
paths:
  /article:
    get:
      tags:
        - article
      description: Get all articles
      operationId: getArticles
      parameters:
        - in: query
          name: category
          schema:
            type: string
            default: BLOG
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
            default: en
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: itemsPerPage
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Articles retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
    post:
      tags:
        - article
      description: Add an article
      operationId: addArticle
      requestBody:
        description: Article object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        '200':
          description: Article created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid object supplied
          content: {}
  '/article/{id}':
    put:
      tags:
        - article
      summary: Modify an article
      operationId: updateArticle
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      requestBody:
        description: Article that is updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
      responses:
        '200':
          description: Article updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid object supplied
        '404':
          description: Article not found
    delete:
      tags:
        - article
      summary: Delete an article
      operationId: deleteArticle
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200':
          description: Article deleted
        '404':
          description: Article not found
  /user:
    get:
      tags:
        - user
      summary: Get all users
      operationId: getUsers
      parameters:
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: itemsPerPage
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Retrieved users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - user
      summary: Add user
      operationId: addUser
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid object supplied
  /user-id:
    put:
      tags:
        - user
      summary: Modify a user
      operationId: updateUser
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      requestBody:
        description: User that is updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid object supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found
components:
  schemas:
    Article:
      type: object
      properties:
        id:
          type: string
          format: uuid
        author:
          $ref: '#/components/schemas/User'
        category:
          type: string
          description: Category
          enum:
            - BLOG
            - FRONT_PAGE
        title:
          type: string
          description: Title
        slug:
          type: string
        text:
          type: string
        tags:
          type: string
        language:
          type: string
        audience:
          type: string
          description: Audience
          enum:
            - PUBLIC
            - PRIVATE
        publishDate:
          type: string
          format: date-time
          description: Published Date
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          description: Email Address
          type: string
        lastName:
          description: Last Name
          type: string
        firstName:
          description: First Name
          type: string
        address:
          description: Address
          type: string
        phoneNumber:
          description: Phone Number
          type: string
        userStatus:
          description: Status
          type: string
          enum:
            - ACTIVE
            - INACTIVE
